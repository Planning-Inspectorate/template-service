# just wait for PR to run on main as a tirgger
pr: none
trigger: none

resources:
  repositories:
    - repository: templates
      type: github
      endpoint: Planning-Inspectorate
      name: Planning-Inspectorate/common-pipeline-templates
      ref: refs/tags/release/3.20.0
  pipelines:
    - pipeline: pr
      source: PR
      trigger:
        branches:
          include:
            - main

extends:
  template: stages/wrapper_ci.yml@templates
  parameters:
    gitFetchDepth: 0
    globalVariables:
      - template: .azure/pipelines/variables.yml@self
    validationJobs:
      - name: Docker Build App 1
        steps:
          - template: ../steps/azure_web_app_docker_build_push.yml@templates
            parameters:
              azurecrName: $(azurecrName)
              dockerfilePath: $(Build.SourcesDirectory)/apps/app-1/Dockerfile
              repository: service-name/app-1
              buildArgs:
                - GIT_SHA=$(Build.SourceVersion)
      - name: Docker Build App 2
        steps:
          - template: ../steps/azure_web_app_docker_build_push.yml@templates
            parameters:
              azurecrName: $(azurecrName)
              dockerfilePath: $(Build.SourcesDirectory)/apps/app-2/Dockerfile
              repository: service-name/app-2
              buildArgs:
                - GIT_SHA=$(Build.SourceVersion)
      - name: Function Build
        steps:
          - template: ../steps/node_script.yml
            parameters:
              nodeVersion: 22
              script: npm ci --omit=dev --workspace=service-name-function --workspace=@pins/service-name-database --workspace=@pins/service-name-lib
              workingDirectory: $(Build.Repository.LocalPath)
          - template: ../steps/node_script.yml
            parameters:
              nodeVersion: 22
              script: npm run db-generate
              workingDirectory: $(Build.Repository.LocalPath)
          - template: ../steps/node_script.yml
            parameters:
              nodeVersion: 22
              script: npm run prepare-package
              workingDirectory: $(Build.Repository.LocalPath)/apps/function
          - script: |
              source ~/.bashrc
              # copy root node_modules to function (but don't overwrite)
              rsync -a -r --ignore-existing $(Build.Repository.LocalPath)/node_modules/ $(Build.Repository.LocalPath)/apps/function/node_modules/
              # ensure there is a @pins/service-name-database folder
              mkdir -p $(Build.Repository.LocalPath)/apps/function/packages/service-name-database
              # ensure there is a @pins/service-name-lib folder
              mkdir -p $(Build.Repository.LocalPath)/apps/function/packages/service-name-lib
              # copy db package to packages/service-name-database folder
              cp -r $(Build.Repository.LocalPath)/packages/database/* $(Build.Repository.LocalPath)/apps/function/packages/service-name-database/
              # copy lib package to packages/service-name-lib folder
              cp -r $(Build.Repository.LocalPath)/packages/lib/* $(Build.Repository.LocalPath)/apps/function/packages/service-name-lib/
          - task: ArchiveFiles@2
            displayName: Archive files
            inputs:
              rootFolderOrFile: $(Build.Repository.LocalPath)/apps/function
              includeRootFolder: false
              archiveFile: $(System.DefaultWorkingDirectory)/functions.zip
          - publish: $(System.DefaultWorkingDirectory)/functions.zip
            artifact: integration-functions
            displayName: Publish Functions Artifact
